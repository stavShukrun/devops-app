def runE2E = false
def publish = false
pipeline{
    agent any
    environment {
        projectName = 'stav-app'
        emailAddress = "shukrunstav@gmail.com"
   }
    stages{
        stage("preparing workspace"){
            steps{
                deleteDir()
                checkout scm
            }
        }

        stage('plan tests'){
            steps{
                script{
                    if (env.BRANCH_NAME.startsWith('feature/')){
                        def commitMessage = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
                        if (commitMessage.contains('#e2e')){
                            runE2E = true
                        }
                    }
                    else if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME.startsWith('release/')){
                        runE2E = true
                        publish = true
                    }
                }
            }
        }

        stage("Get tag & version"){
            when {
                expression {env.BRANCH_NAME.startsWith('release/')}
            }
            steps{
                git branch: env.BRANCH_NAME, credentialsId: '053257ea-6adf-43e2-a87a-b7f3ae37b299', url: "git@gitlab.stav:root/analytics.git"
                script{
                    major_version=sh(script: "echo ${env.BRANCH_NAME} | grep -Eo '[0-9]{1,24}' | head -n1", returnStdout: true).trim()
                    minor_version=sh(script: "echo ${env.BRANCH_NAME} | grep -Eo '[0-9]{1,24}' | tail -n1", returnStdout: true).trim()
                    current_tag=sh(script: "git tag |  grep -Eo '[0-9]{1,24}' | tail -n 1 ", returnStdout: true).trim()
                    if ("${current_tag}" == '') {
                        echo "no Tags, will give a tag of ${major_version}.${minor_version}.1 now"
                        new_tag="${major_version}.${minor_version}.1"
                    } else {
                        current_tag_plusOne=plusOne(current_tag)
                        new_tag="${major_version}.${minor_version}.${current_tag_plusOne}"
                    }
                }
                checkout scm
            }
        }

        stage("build test and pack") {
            steps {
                configFileProvider([configFile(fileId: 'setting-artifactory', variable: 'MAVEN_SETTINGS')]) {
                    sh ''
                }
            }
        }

        stage("E2E tests"){
            when {
                expression {
                    runE2E
                }
            }
            steps {
                configFileProvider([configFile(fileId: 'setting-artifactory', variable: 'MAVEN_SETTINGS')]) {
                    sh """
                        """
                }
            }
        }
        stage("publish"){
            when{
                expression{
                    publish
                }
            }
            steps{
            script{
                configFileProvider([configFile(fileId: 'setting-artifactory', variable: 'MAVEN_SETTINGS')]) {
                    if (env.BRANCH_NAME.startsWith('main')) {
                            sh ''
                        }
                    else {
                            sh """"""
                        }
                    }
                }
            }
        }
    }
    post{
        failure {
            echo "sorry, something did not work :( will remove image and container from local host"
                mail body: "<b>failure :(</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL: ${env.BUILD_URL}", charset: 'UTF-8', mimeType: 'text/html', subject: "error CI: Project name -> ${env.JOB_NAME}", to: "${emailAddress}"
        }
        success {
            echo "well done, all good :)"
            mail body: "<b>success :)</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL: ${env.BUILD_URL}", charset: 'UTF-8', mimeType: 'text/html', subject: "success CI: Project name -> ${env.JOB_NAME}", to: "${emailAddress}"
        }
    }

}

int plusOne(String current_version){
    int new_version=Integer.parseInt(current_version)+1
    return new_version
}